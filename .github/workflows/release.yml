name: Release

on: 
  push:
    tags:
    - '*'

env:
  BUILD_TYPE: Release
  SONAR_SCANNER_VERSION: 5.0.1.3006
  SONAR_SERVER_URL: "https://sonarcloud.io"
  BUILD_WRAPPER_OUT_DIR: build_wrapper_output_directory  # Directory where build-wrapper output will be placed

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-20.04
            INSTALL_SHELL: bash
            INSTALL_SCRIPT: ubuntu.sh
            cuda: "12.3"
            build_params: ""
            asset_name: "simulation-ubuntu.zip"
          - os: macos-latest
            INSTALL_SHELL: bash
            INSTALL_SCRIPT: macos.sh
            build_params: ""
            asset_name: "simulation-macos.zip"
            cuda: "12.3"
          - os: windows-2019
            INSTALL_SHELL: powershell
            INSTALL_SCRIPT: windows.ps1
            build_params: "-g \"Visual Studio 16 2019\" -a x64"
            asset_name: "simulation-windows.zip"
            cuda: "12.3.2"
    defaults:
      run:
        shell: ${{ matrix.INSTALL_SHELL }}
    steps:
    - uses: actions/checkout@v2

    - name: Install CUDA
      env:
        cuda: ${{ matrix.cuda }}
      run: ./scripts/installation/install_cuda_${{ matrix.INSTALL_SCRIPT }}
  
    - name: Install OpenGL
      run: ./scripts/installation/install_open_gl_${{ matrix.INSTALL_SCRIPT }}

    - name: Windows Pre Build
      shell: bash
      if: matrix.os == 'windows-2019'
      run: |
        rm config/project.config.example
        mv config/mvsc_project.config.example config/project.config.example

    - name: Build
      shell: bash
      run: | 
        cd scripts
        ./compile.sh -v "${{ matrix.build_params }}"

    - name: Test CPU
      shell: bash
      run: | 
        cd scripts
        ./test.sh -nc

    - name: Run CPU
      shell: bash
      run: | 
        cd scripts
        ./engine.sh -n

    - name: Zip Build (Ubuntu)
      shell: bash
      if: matrix.os == 'ubuntu-20.04'
      run: |
        cd builds
        zip -r ../build.zip build 

    - name: Zip Build (Ubuntu)
      shell: bash
      if: matrix.os == 'macos-latest'
      run: |
        cd builds
        zip -r ../build.zip build 

    - name: Zip Build (Windows)
      shell: powershell
      if: matrix.os == 'windows-2016'
      run: Compress-Archive builds/build build.zip

    - name: Archive Build
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: build.zip
        asset_name: ${{ matrix.asset_name }}
        tag: ${{ github.ref }}