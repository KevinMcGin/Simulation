name: CPU Build & Test

on: [push]

env:
  BUILD_TYPE: Release
  SONAR_SCANNER_VERSION: 5.0.1.3006
  SONAR_SERVER_URL: "https://sonarcloud.io"
  BUILD_WRAPPER_OUT_DIR: build_wrapper_output_directory  # Directory where build-wrapper output will be placed

jobs:
  gpuTests:
    runs-on: "ubuntu-latest"
    steps:
    - uses: actions/checkout@v2
    - name: Gpu Test
      env:
        # TEST_TOKEN: ${{ secrets.TEST_TOKEN }}
        TEST_TOKEN: "test"
      run: ./.github/scripts/run_test_server.sh ${{ github.sha }} $TEST_TOKEN

  cpuTests:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-20.04
            INSTALL_SHELL: bash
            INSTALL_SCRIPT: ubuntu.sh
            cuda: "12.3"
            build_params: ""
          - os: macos-latest
            INSTALL_SHELL: bash
            INSTALL_SCRIPT: macos.sh
            cuda: "12.3"
            build_params: ""
          - os: windows-2019
            INSTALL_SHELL: powershell
            INSTALL_SCRIPT: windows.ps1
            build_params: "-g \"Visual Studio 16 2019\" -a x64"
            cuda: "12.3.2"
    defaults:
      run:
        shell: ${{ matrix.INSTALL_SHELL }}
    steps:
    - uses: actions/checkout@v2

    - name: Install CUDA
      env:
        cuda: ${{ matrix.cuda }}
      run: ./scripts/installation/install_cuda_${{ matrix.INSTALL_SCRIPT }}
  
    - name: Install OpenGL
      run: ./scripts/installation/install_open_gl_${{ matrix.INSTALL_SCRIPT }}

    - name: Windows Pre Build
      shell: bash
      if: matrix.os == 'windows-2019'
      run: |
        rm config/project.config.example
        mv config/mvsc_project.config.example config/project.config.example

    - name: Build
      shell: bash
      run: | 
        cd scripts
        ./compile.sh -v ${{ matrix.build_params }}

    - name: Test CPU
      shell: bash
      run: | 
        cd scripts
        ./test.sh -nc

    - name: Run CPU
      shell: bash
      run: | 
        cd scripts
        ./engine.sh -n
  codeCoverage:
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2

    - name: Install CUDA
      env:
        cuda: "12.3"
      shell: bash
      run: |
        source ./scripts/installation/install_cuda_ubuntu.sh

    - name: Install OpenGL
      shell: bash
      run: |
        source ./scripts/installation/install_open_gl_ubuntu.sh

    - name: Set up JDK 17
      uses: actions/setup-java@v1
      with:
        java-version: 17

    - name: Download and set up sonar-scanner
      env:
        SONAR_SCANNER_DOWNLOAD_URL: https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-${{ env.SONAR_SCANNER_VERSION }}-linux.zip
      shell: bash
      run: |
        mkdir -p $HOME/.sonar
        curl -sSLo $HOME/.sonar/sonar-scanner.zip ${{ env.SONAR_SCANNER_DOWNLOAD_URL }} 
        unzip -o $HOME/.sonar/sonar-scanner.zip -d $HOME/.sonar/
        echo "$HOME/.sonar/sonar-scanner-${{ env.SONAR_SCANNER_VERSION }}-linux/bin" >> $GITHUB_PATH

    - name: Download and set up build-wrapper
      env:
        BUILD_WRAPPER_DOWNLOAD_URL: ${{ env.SONAR_SERVER_URL }}/static/cpp/build-wrapper-linux-x86.zip
      shell: bash
      run: |
        curl -sSLo $HOME/.sonar/build-wrapper-linux-x86.zip ${{ env.BUILD_WRAPPER_DOWNLOAD_URL }}
        unzip -o $HOME/.sonar/build-wrapper-linux-x86.zip -d $HOME/.sonar/
        echo "$HOME/.sonar/build-wrapper-linux-x86" >> $GITHUB_PATH

    - name: Run build-wrapper
      shell: bash
      run: |
        cmake -S . -B .
        build-wrapper-linux-x86-64 --out-dir ${{ env.BUILD_WRAPPER_OUT_DIR }} make   
      
    - name: gcovr
      shell: bash
      run: |
        export SIMULATION_USE_GPU=false
        make test
        sudo apt-get install gcovr
        gcovr -r . . --exclude-throw-branches --sonarqube coverage.xml
        echo "COVERAGE"
        cat coverage.xml
        ls

    - name: Run sonar-scanner
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      shell: bash
      run: |
        sonar-scanner --define sonar.host.url="${{ env.SONAR_SERVER_URL }}" --define sonar.cfamily.build-wrapper-output="${{ env.BUILD_WRAPPER_OUT_DIR }}"

